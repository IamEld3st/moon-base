apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: kafka-to-datagrid-route
spec:
  configuration:
    - type: secret
      value: bobbycar-kafka2datagrid-secret
  sources:
    - content: "package com.redhat.bobbycar.routes;\nimport java.nio.charset.Charset;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.apache.camel.PropertyInject;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.infinispan.InfinispanConstants;\nimport org.apache.camel.component.infinispan.InfinispanOperation;\nimport org.apache.camel.processor.aggregate.DefaultAggregateController;\nimport org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy;\nimport org.infinispan.client.hotrod.configuration.ClientIntelligence;\nimport org.infinispan.client.hotrod.configuration.Configuration;\nimport org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\nimport org.infinispan.client.hotrod.configuration.SaslQop;\nimport org.infinispan.commons.marshall.StringMarshaller;\n\npublic class KafkaToDatagridRoute extends RouteBuilder {\n\t\n\t@PropertyInject(\"com.redhat.bobbycar.camelk.dg.host\")\n    private String datagridHost;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.user\", defaultValue = \"developer\")\n    private String datagridUsername;\n\t@PropertyInject(\"com.redhat.bobbycar.camelk.dg.password\")\n    private String datagridPassword;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.aggregationInterval\", defaultValue = \"60000\")\n    private long aggregationInterval;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.aggregationDistinct\", defaultValue = \"true\")\n    private boolean aggregationDistinct;\n\t\n\tpublic static class Entry {\n\t\tString key;\n\t\tString value;\n\t\t\n\t\tpublic Entry(String key, String value) {\n\t\t\tsuper();\n\t\t\tthis.key = key;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(key);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj)\n\t\t\t\treturn true;\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\t\t\tif (getClass() != obj.getClass())\n\t\t\t\treturn false;\n\t\t\tEntry other = (Entry) obj;\n\t\t\treturn Objects.equals(key, other.key);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn value;\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void configure() throws Exception {\n\t\tbindToRegistry(\"cacheContainerConfiguration\", getCacheConfig());\n\t\t\n\t\tfrom(\"kafka:{{com.redhat.bobbycar.camelk.kafka.topic}}?clientId=kafkaToDatagridCamelClient&brokers={{com.redhat.bobbycar.camelk.kafka.brokers}}:9092\")\n\t\t\t.setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.PUT)\n\t\t\t.setHeader(InfinispanConstants.KEY).expression(jsonpath(\"$.carid\"))\n\t\t    .setHeader(InfinispanConstants.VALUE).expression(simple(\"${body}\"))\n\t\t    .log(\"Saving data to cache with key: ${headers[CamelInfinispanKey]} and value: ${body} of type  ${body.class}\")\n\t\t\t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\");\n\t\t\n\t\tfrom(\"kafka:{{com.redhat.bobbycar.camelk.kafka.topic}}?clientId=kafkaToDatagridAggregatorCamelClient&brokers={{com.redhat.bobbycar.camelk.kafka.brokers}}:9092\")\n\t\t\t\t.aggregate(simple(\"true\"), new GroupedBodyAggregationStrategy())\n\t\t\t\t.completionInterval(aggregationInterval).id(\"myAggregator\")\n\t\t\t\t.aggregateController(new DefaultAggregateController())\n\t\t\t\t.process(ex -> {\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\tList<String> aggregation = ex.getIn().getBody(List.class);\n\t\t\t\t\tStream<String> aggStream = aggregation.stream().sorted();\n\t\t\t\t\tif (aggregationDistinct) {\n\t\t\t\t\t\taggStream = aggStream.map(s -> new Entry(s.trim().substring(9, 46), s)).distinct().map(Entry::toString);\n\t\t\t\t\t}\n\t\t\t\t\tex.getIn().setBody(\"[\" + aggStream.collect(Collectors.joining(\",\")) + \"]\");\n\t\t\t\t})\n\t\t\t\t.log(\"Aggregated for the given interval: ${body}\")\n\t\t\t\t.setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.PUT)\n\t\t\t\t.setHeader(InfinispanConstants.KEY).expression(simple(\"aggregated\"))\n\t\t\t    .setHeader(InfinispanConstants.VALUE).expression(simple(\"${body}\"))\n\t\t\t\t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\");\n\t}\n\t\n\tprivate Configuration getCacheConfig() throws Exception {\n\t\tConfigurationBuilder hotRodBuilder = new ConfigurationBuilder();\n\n\t\treturn hotRodBuilder.addServer()\n\t        .host(datagridHost).port(11222)\n\t        \t.marshaller(new StringMarshaller(Charset.defaultCharset()))\n\t        \t//.marshaller(new ProtoStreamMarshaller())\n\t        .clientIntelligence(ClientIntelligence.BASIC)\n\t        \t.security()\n\t        \t\t.authentication().enable()\n\t        \t\t.username(datagridUsername)\n\t        \t\t.password(datagridPassword)\n\t        \t\t.realm(\"default\")\n\t        \t\t.serverName(\"infinispan\")\n\t        \t\t.saslQop(SaslQop.AUTH)\n\t        \t\t.saslMechanism(\"DIGEST-MD5\")\n\t        \t\t\n\t\t\t.ssl()\n\t        \t.sniHostName(datagridHost)\n\t        \t.trustStorePath(\"/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt\")\n        .build();\n\t}\n\t\n}\n"
      name: KafkaToDatagridRoute.java
