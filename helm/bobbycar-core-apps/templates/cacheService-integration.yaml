apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: cache-service
  labels:
    app.kubernetes.io/part-of: {{ .Values.appName }}
spec:
  configuration:
    - type: secret
      value: cache-service-secret
  dependencies:
    - 'camel:undertow'
    - 'camel:infinispan'
  profile: OpenShift
  sources:
    - content: {{`"package com.redhat.bobbycar.routes;\nimport java.nio.charset.Charset;\nimport java.util.stream.Collectors;\n\nimport org.apache.camel.PropertyInject;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.infinispan.InfinispanConstants;\nimport org.apache.camel.component.infinispan.InfinispanOperation;\nimport org.apache.camel.model.rest.RestBindingMode;\nimport org.infinispan.client.hotrod.RemoteCache;\nimport org.infinispan.client.hotrod.RemoteCacheManager;\nimport org.infinispan.client.hotrod.configuration.ClientIntelligence;\nimport org.infinispan.client.hotrod.configuration.Configuration;\nimport org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\nimport org.infinispan.client.hotrod.configuration.SaslQop;\nimport org.infinispan.commons.marshall.StringMarshaller;\n\npublic class DatagridToRestRoute extends RouteBuilder {\n\t// private static final String PATH_TO_SERVICE_CA = \"/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt\";\n\t@PropertyInject(\"com.redhat.bobbycar.camelk.dg.host\")\n    private String datagridHost;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.user\", defaultValue = \"developer\")\n    private String datagridUsername;\n\t@PropertyInject(\"com.redhat.bobbycar.camelk.dg.password\")\n    private String datagridPassword;\n\tprivate RemoteCacheManager cacheManager;\n\tprivate RemoteCache<String, String> zonesCache;\n\tprivate RemoteCache<String, String> carsCache;\n\t\n\t@Override\n\tpublic void configure() throws Exception {\n\t\t\n\t\trestConfiguration().host(\"0.0.0.0\").port(8080).component(\"undertow\")\n\t\t\t//.enableCORS(true)\n\t\t\t//.corsAllowCredentials(true)\n\t\t\t//.corsHeaderProperty(\"Access-Control-Allow-Origin\",\"*\")\n\t\t\t//.corsHeaderProperty(\"Access-Control-Allow-Headers\",\"Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization\")\n\t\t\t.bindingMode(RestBindingMode.json)\n\t\t\t.dataFormatProperty(\"prettyPrint\", \"true\")\n\t\t\t.contextPath(\"/\");\n\t\tConfiguration cacheConfig = createCacheConfig();\n\t\tbindToRegistry(\"cacheManager\", cacheConfig);\n\t\tbindToRegistry(\"cacheContainerConfiguration\", cacheConfig);\n\t\tinitRemoteCache(cacheConfig);\n\t\tfrom(\"rest:get:cars\")\n\t\t\t.setHeader(\"Access-Control-Allow-Origin\",constant(\"*\"))\n\t\t\t.process(ex -> {\n\t\t\t\tex.getIn().setBody(\"[\" + carsCache.values().stream().collect(Collectors.joining(\",\")) + \"]\");\n\t\t\t});\n\t\tfrom(\"rest:get:cars/{carid}\")\n\t\t\t .setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.GET)\n\t\t\t .setHeader(InfinispanConstants.KEY).expression(simple(\"${headers[carid]}\"))\n\t\t\t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.car.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\");\n\t\tfrom(\"rest:get:zones\")\n\t\t\t.setHeader(\"Access-Control-Allow-Origin\",constant(\"*\"))\n\t\t\t.process(ex -> {\n\t\t\t\tex.getIn().setBody(\"[\" + zonesCache.values().stream().collect(Collectors.joining(\",\")) + \"]\");\n\t\t\t});\t\n\t\tfrom(\"rest:get:zones/{zoneid}\")\t\n\t\t \t.setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.GET)\n\t\t \t.setHeader(InfinispanConstants.KEY).expression(simple(\"${headers[zoneid]}\"))\n\t\t \t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.zone.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\");\n\t}\n\n\tprivate void initRemoteCache(Configuration cacheConfig) {\n\t\tcacheManager = new RemoteCacheManager(cacheConfig);\n\t\tcacheManager.start();\n\t\tzonesCache = cacheManager.administration().getOrCreateCache(\"zones\", \"org.infinispan.DIST_ASYNC\");\n\t\tcarsCache = cacheManager.administration().getOrCreateCache(\"cars\", \"org.infinispan.DIST_ASYNC\");\n\t\tcacheManager.start();\n\t}\n\t\n\tprivate Configuration createCacheConfig() {\n\t\tConfigurationBuilder hotRodBuilder = new ConfigurationBuilder();\n\t\treturn hotRodBuilder.addServer()\n\t        .host(datagridHost).port(11222)\n\t        \t.marshaller(new StringMarshaller(Charset.defaultCharset()))\n\t        .clientIntelligence(ClientIntelligence.HASH_DISTRIBUTION_AWARE)\n\t        \t.security()\n\t        \t\t.authentication().enable()\n\t        \t\t.username(datagridUsername)\n\t        \t\t.password(datagridPassword)\n\t        \t\t.serverName(\"infinispan\")\n\t        \t\t.saslQop(SaslQop.AUTH)\n\t        \t\t.saslMechanism(\"DIGEST-MD5\")\n        .build();\n\t}\n\t\n\t\n}\n"`}}
      name: DatagridToRestRoute.java